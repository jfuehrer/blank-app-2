import pandas as pd

try:
    # Load CSV file ('replace financial_data.csv' with your file name)
    data = pd.read_csv('financial_data.csv')

    # Ensure the CSV contains the required columns
    required_columns = ['Vendor', 'Altman_Z', 'DTE', 'ROA', 'ROE']
    for col in required_columns:
        if col not in data.columns:
            raise ValueError(f"Missing required column: {col}")

    # Define weightings for each financial metric
    weights = {
        'Altman_Z': 0.30,
        'DTE': 0.20,
        'DTI': 0.20,  # Potential issue: 'DTI' is not in required_columns, typo?
        'ROA': 0.15,
        'ROE': 0.15
    }

    # Function to calculate the financial stability score
    def calculate_financial_score(row):
        try:
            return (
                (row['Altman_Z'] * weights['Altman_Z']) +
                (row['DTE'] * weights['DTE']) +
                (row.get('DTI', 0) * weights['DTI']) +  # Use .get() to prevent KeyError if missing
                (row['ROA'] * weights['ROA']) +
                (row['ROE'] * weights['ROE'])
            ) / sum(weights.values())  # Normalize by sum of weights
        except KeyError as e:
            print(f"Missing column in row: {e}")
            return None
        except Exception as e:
            print(f"Unexpected error while calculating financial score: {e}")
            return None

    # Function to determine the financial risk category and interpretation
    def determine_risk_category(score):
        if score is None:
            return 'Unknown', 'Error in calculation, check input data.'
        if score >= 8.0:
            return 'Low Risk', 'Strong financial health, reliable vendor. Proceed with confidence.'
        elif 6.0 <= score < 8.0:
            return 'Moderate Risk', 'Stable, moderate financial health.'
        elif 4.0 <= score < 6.0:
            return 'High Risk', 'Poor financial health; high-risk vendor. Consider alternative or monitor closely.'
        else:
            return 'Severe Risk', 'Potential bankruptcy or major financial distress. Avoid vendor.'

    # Apply the function to each row to calculate the score and risk category
    data['Financial_Stability_Score'] = data.apply(calculate_financial_score, axis=1)
    data[['Risk_Category', 'Interpretation']] = data['Financial_Stability_Score'].apply(lambda score: pd.Series(determine_risk_category(score)))

    # Display the results
    print(data[['Vendor', 'Financial_Stability_Score', 'Risk_Category', 'Interpretation']])

    # Save the results to a new CSV file
    data.to_csv('financial_stability_scores_with_risk.csv', index=False)

except FileNotFoundError:
    print("Error: The CSV file was not found. Ensure the correct file name and path.")
except ValueError as ve:
    print(f"Error: {ve}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
